{"version":3,"sources":["component/Admin/Company/CompanyProfile.js"],"names":["id","Layout","Content","Typography","Title","Select","Option","ProfileCompany","React","lazy","props","fetch_find_company","a","client","query","GET_COMPANY","variables","company_id","match","params","fetchPolicy","then","result","console","log","setState","update","update_data","data","get_company_detail","company_provider","get_parent_company_provider","SearchEmail","value","$regex","$options","role","USER_EMAIL_QUERY","emails","user_search","normFile","e","Array","isArray","fileList","getBase64","img","callback","reader","FileReader","addEventListener","readAsDataURL","beforeUpload","file","isJpgOrPng","type","message","error","isLt2M","size","handle_logo_Change","info","status","originFileObj","logo_file","imageUrl","loading","handle_profile_Change","profile_file","profile_imageUrl","update_company","form","history","validateFields","err","values","company_data","length","state","mutate","mutation","UPDATE_COMPANY_DETAIL","Alert_msg","update_company_detail","push","remove","k","keys","getFieldValue","setFieldsValue","filter","key","add","nextKeys","concat","handleSubmit","preventDefault","names","map","modalVisible","dataSource","previewVisible","previewImage","pagination","pageSize","current","total","simple","selectedItems","category","this","resetFields","undefined","getFieldDecorator","initialValue","formItems","index","Item","label","required","validateTrigger","rules","whitespace","placeholder","style","width","marginRight","className","onClick","onSubmit","htmlType","Component","Form","create"],"mappings":"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","file":"static/js/40.3ccc50d4.chunk.js","sourcesContent":["import { Button, Checkbox, Col, Form, Icon, Input, Layout, message, Radio, Row, Select, Tag, Typography } from 'antd';\r\nimport Card from 'antd/es/card';\r\nimport Table from 'antd/es/table';\r\nimport Upload from 'antd/es/upload';\r\nimport size from 'lodash/size';\r\nimport React, { Suspense } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { client } from \"../../../apollo\";\r\nimport { GET_COMPANY, UPDATE_COMPANY_DETAIL, USER_EMAIL_QUERY } from '../../../graphql/Admin/user';\r\nimport '../../../scss/Category.scss';\r\nimport '../../../scss/template.scss';\r\nimport { Alert_msg } from '../../Comman/alert_msg';\r\nimport RoleView, { RoleViewFunction } from '../../Comman/roles_permission_view';\r\nimport AdminHeader from '../Layout/AdminHeader';\r\nimport AdminSider from '../Layout/AdminSider';\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\nconst { Option } = Select;\r\nlet id = 0;\r\nconst CompanyWorker = React.lazy(() => import('./CompanyWorker'));\r\nclass ProfileCompany extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalVisible: false,\r\n            dataSource: [],\r\n            loading: false,\r\n            imageUrl: '',\r\n            profile_imageUrl: '',\r\n            update: 0,\r\n            update_data: {},\r\n            file: {},\r\n            logo_file: {},\r\n            profile_file: {},\r\n            previewVisible: false,\r\n            previewImage: '',\r\n            pagination: {\r\n                pageSize: 5,\r\n                current: 1,\r\n                total: 0,\r\n                simple: true,\r\n            },\r\n            selectedItems: [],\r\n            category: [],\r\n            emails: [],\r\n            company_provider: [],\r\n        };\r\n\r\n    }\r\n    componentDidMount() {\r\n        const { form } = this.props;\r\n        form.resetFields();\r\n        // console.log(this.props.match.params.id);\r\n        if (this.props?.match?.params?.id !== undefined) {\r\n            this.fetch_find_company();\r\n        }\r\n    }\r\n\r\n    fetch_find_company = async () => {\r\n        await client.query({\r\n            query: GET_COMPANY,\r\n            variables: { company_id: this.props.match.params.id },\r\n            fetchPolicy: 'no-cache',\r\n        }).then(result => {\r\n            console.log(result);\r\n            this.setState({\r\n                update: 1,\r\n                update_data: result.data.get_company_detail.data[0],\r\n                company_provider: result.data.get_company_detail.data[0].get_parent_company_provider,\r\n            });\r\n        });\r\n    }\r\n    SearchEmail = async (value) => {\r\n        let data = { 'email': { $regex: '.*' + value + '.*', $options: 'i' }, role: 2 }\r\n        await client.query({\r\n            query: USER_EMAIL_QUERY,\r\n            variables: { data },\r\n            fetchPolicy: 'no-cache',\r\n        }).then(result => {\r\n            console.log(result);\r\n            this.setState({\r\n                emails: result.data.user_search,\r\n            });\r\n        });\r\n    }\r\n\r\n    normFile = e => {\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    getBase64 = (img, callback) => {\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', () => callback(reader.result));\r\n        reader.readAsDataURL(img);\r\n    }\r\n\r\n    beforeUpload = (file) => {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            message.error('You can only upload JPG/PNG file!');\r\n        }\r\n        const isLt2M = file.size / 1024 / 1024 < 2;\r\n        if (!isLt2M) {\r\n            message.error('Image must smaller than 2MB!');\r\n        }\r\n        return isJpgOrPng && isLt2M;\r\n    }\r\n\r\n\r\n    handle_logo_Change = info => {\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n        if (info.file.status) {\r\n            console.log(info.file.originFileObj);\r\n            this.setState({ logo_file: info.file.originFileObj });\r\n            this.getBase64(info.file.originFileObj, imageUrl =>\r\n                this.setState({\r\n                    imageUrl,\r\n                    loading: false,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n\r\n    handle_profile_Change = info => {\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n        if (info.file.status) {\r\n            console.log(info.file.originFileObj);\r\n            this.setState({ profile_file: info.file.originFileObj });\r\n            this.getBase64(info.file.originFileObj, profile_imageUrl =>\r\n                this.setState({\r\n                    profile_imageUrl,\r\n                    loading: false,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n\r\n    update_company = () => {\r\n        const { form, history } = this.props;\r\n        form.validateFields(async (err, values) => {\r\n            if (!err) {\r\n                let company_data = {}\r\n                if (values['name']) {\r\n                    company_data['name'] = values['name']\r\n                }\r\n                if (values['about']) {\r\n                    company_data['about'] = values['about']\r\n                }\r\n                if (values['website_url']) {\r\n                    company_data['website_url'] = values['website_url']\r\n                }\r\n                if (values['address']) {\r\n                    company_data['address'] = values['address']\r\n                }\r\n                if (values['provider_email'] && values['provider_email'].length) {\r\n                    company_data['provider_email'] = values['provider_email']\r\n                }\r\n                let update_data = {}\r\n                if (this.props.match.params.id) {\r\n                    update_data['_id'] = this.props.match.params.id\r\n                }\r\n                if (size(company_data)) {\r\n                    update_data['company_data'] = [[company_data]]\r\n                }\r\n                if (this.state.logo_file && size(this.state.logo_file)) {\r\n                    update_data['logo_file'] = this.state.logo_file\r\n                }\r\n                if (this.state.profile_file && size(this.state.profile_file)) {\r\n                    update_data['profile_file'] = this.state.profile_file\r\n                }\r\n                await client.mutate({\r\n                    mutation: UPDATE_COMPANY_DETAIL,\r\n                    variables: update_data\r\n                }).then((result, loading, error) => {\r\n                    Alert_msg(result.data.update_company_detail);\r\n                    if (result.data.update_company_detail.status === \"success\") {\r\n                        history.push('/admin-company');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    remove = k => {\r\n        const { form } = this.props;\r\n        // can use data-binding to get\r\n        const keys = form.getFieldValue('keys');\r\n        // We need at least one passenger\r\n        if (keys.length === 1) {\r\n            return;\r\n        }\r\n\r\n        // can use data-binding to set\r\n        form.setFieldsValue({\r\n            keys: keys.filter(key => key !== k),\r\n        });\r\n    };\r\n\r\n    add = () => {\r\n        const { form } = this.props;\r\n        // can use data-binding to get\r\n        const keys = form.getFieldValue('keys');\r\n        const nextKeys = keys.concat(id++);\r\n        // can use data-binding to set\r\n        // important! notify form to detect changes\r\n        form.setFieldsValue({\r\n            keys: nextKeys,\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                const { keys, names } = values;\r\n                console.log('Received values of form: ', values);\r\n                console.log('Merged values:', keys.map(key => names[key]));\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const { getFieldDecorator, getFieldValue } = this.props.form;\r\n        \r\n        getFieldDecorator('keys', { initialValue: [] });\r\n        const keys = getFieldValue('keys');\r\n        const formItems = keys.map((k, index) => (\r\n            <Form.Item\r\n                label={index === 0 ? 'Passengers' : ''}\r\n                required={false}\r\n                key={k}\r\n            >\r\n                {getFieldDecorator(`names[${k}]`, {\r\n                    validateTrigger: ['onChange', 'onBlur'],\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Please input passenger's name or delete this field.\",\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"passenger name\" style={{ width: '100%', marginRight: 8 }} />)}\r\n                {keys.length > 1 ? (\r\n                    <Icon\r\n                        className=\"dynamic-delete-button\"\r\n                        type=\"minus-circle-o\"\r\n                        onClick={() => this.remove(k)}\r\n                    />\r\n                ) : null}\r\n            </Form.Item>\r\n        ));\r\n        const uploadButton = (\r\n            <div>\r\n                <Icon type={this.state.loading ? 'loading' : 'plus'} />\r\n                <div className=\"ant-upload-text\">Upload</div>\r\n            </div>\r\n        );\r\n        const { form } = this.props;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                {formItems}\r\n                <Form.Item >\r\n                    <Button type=\"dashed\" onClick={this.add} style={{ width: '100%' }}>\r\n                        <Icon type=\"plus\" /> Add field\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create()(ProfileCompany);\r\n"],"sourceRoot":""}