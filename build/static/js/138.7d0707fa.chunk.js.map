{"version":3,"sources":["component/Admin/User/EmailSearch.js","../node_modules/is-mobile/index.js","graphql/Admin/user.js"],"names":["EmailSearch","props","_React$useState","React","useState","_React$useState2","Object","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","emails","setemails","_React$useState3","_React$useState4","dataSource","setdataSource","handleSearch","_ref","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","value","datas","_yield$client$query","data","wrap","_context","prev","next","onSelect","console","log","$regex","$options","Number","role","length","client","query","USER_EMAIL_QUERY","variables","fetchPolicy","sent","user_search","stop","_x","apply","this","arguments","_ref2","_callee2","pass_value","_context2","passedFunction","_x2","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","antd__WEBPACK_IMPORTED_MODULE_4__","onSearch","placeholder","allowClear","autoClearSearchValue","className","map","user","index","Option","key","_id","module","exports","isMobile","default","mobileRE","tabletRE","opts","ua","navigator","userAgent","headers","result","tablet","test","featureDetect","maxTouchPoints","indexOf","ADD_USER","gql","_templateObject","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__","UPDATE_USER","_templateObject2","GET_USER","_templateObject3","DELETE_USER","_templateObject4","FIND_USER","_templateObject5","PROVIDER_DOCUMENT_VERIFIED","_templateObject6","_templateObject7","GET_COMPANY","_templateObject8","UPDATE_COMPANY_DETAIL","_templateObject9","DELETE_COMPANY","_templateObject10","DELETE_COMPANY_PROVIDER","_templateObject11"],"mappings":"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","file":"static/js/138.7d0707fa.chunk.js","sourcesContent":["import React from 'react';\nimport { AutoComplete } from 'antd';\nimport { USER_EMAIL_QUERY  } from '../../../graphql/Admin/user';\nimport { client } from \"../../../apollo\";\n\nconst EmailSearch = props => {\n    \n    const [emails, setemails] = React.useState('');\n    const [dataSource, setdataSource] = React.useState([]);\n    \n    const handleSearch = async value => {\n        if(value){\n            setemails(value);\n        }else{\n            onSelect(value);\n        }\n        console.log(value);\n        var datas ={}\n        datas[props.value] = { $regex: value ,$options: 'i'}\n        datas['role']=Number(props.role);\n        datas['delete']=0;\n        if (value.length >= 1) {\n            const { data } = await client.query({\n                query: USER_EMAIL_QUERY,\n                variables: { data:datas },\n                fetchPolicy: 'no-cache',\n            });\n            setdataSource(data ? data.user_search : [])\n        }\n    };\n\n    const onSelect = async value => {\n      \n        setemails(value);\n       \n        var pass_value={}\n        if(props.role === 1){\n            pass_value['user_id']=value;\n        }else{\n            pass_value['provider_id']=value;\n        }\n        props.passedFunction(pass_value);\n    }\n    return (\n        <div>\n            <AutoComplete\n                onSelect={onSelect}\n                onSearch={handleSearch}\n                placeholder={props.placeholder}\n                value={emails}\n                allowClear\n                autoClearSearchValue\t\n                className=\"border\"\n            >\n                {dataSource.map((user, index) => {\n                    return (\n                        <AutoComplete.Option key={user._id}>\n                            {user[props.value]}\n                        </AutoComplete.Option>\n                    );\n                })}\n            </AutoComplete>\n        </div>\n    )\n}\n\nexport default EmailSearch;\n","'use strict';\n\nmodule.exports = isMobile;\nmodule.exports.isMobile = isMobile;\nmodule.exports.default = isMobile;\nvar mobileRE = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;\nvar tabletRE = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;\n\nfunction isMobile(opts) {\n  if (!opts) opts = {};\n  var ua = opts.ua;\n  if (!ua && typeof navigator !== 'undefined') ua = navigator.userAgent;\n\n  if (ua && ua.headers && typeof ua.headers['user-agent'] === 'string') {\n    ua = ua.headers['user-agent'];\n  }\n\n  if (typeof ua !== 'string') return false;\n  var result = opts.tablet ? tabletRE.test(ua) : mobileRE.test(ua);\n\n  if (!result && opts.tablet && opts.featureDetect && navigator && navigator.maxTouchPoints > 1 && ua.indexOf('Macintosh') !== -1 && ua.indexOf('Safari') !== -1) {\n    result = true;\n  }\n\n  return result;\n}","import gql from \"graphql-tag\";\n\nexport const ADD_USER = gql`\n    mutation ADDUSER($role:Int,$demo:Boolean,$country_code:String,$phone_no:String,$email:String,$password:String,$last_name:String,$first_name:String,$provider_subCategoryID:[ID],$lat:Float,$lng:Float,$address:String) {\n        admin_add_user(role:$role,demo:$demo,country_code:$country_code,phone_no:$phone_no,email:$email,password:$password,last_name:$last_name,first_name:$first_name,provider_subCategoryID:$provider_subCategoryID,lat:$lat,lng:$lng,address:$address){\n            info\n        }\n    }\n`;\n\nexport const UPDATE_USER = gql`\n    mutation UPDATEUSER($_id:ID,$role:Int,$demo:Boolean,$country_code:String,$phone_no:String,$email:String,$password:String,$last_name:String,$first_name:String,$provider_subCategoryID:[ID],$lat:Float,$lng:Float,$address:String) {\n        admin_update_user(_id:$_id,role:$role,demo:$demo,country_code:$country_code,phone_no:$phone_no,email:$email,password:$password,last_name:$last_name,first_name:$first_name,provider_subCategoryID:$provider_subCategoryID,lat:$lat,lng:$lng,address:$address){\n            info\n        }\n    }\n`;\n\nexport const GET_USER = gql`\n query GETUSER($limit: Int,$page:Int,$role:String,$proof_status:Int) {\n    get_user(limit:$limit,page:$page,role:$role,proof_status:$proof_status) {\n        pageInfo{\n            totalDocs\n            page\n        }\n        data{\n            _id\n            country_code\n            phone_no\n            email\n            first_name\n            last_name\n            address\n            location\n            password\n            provider_subCategoryID\n            # provider_document_url\n            proof_status\n        }\n    }\n}\n`;\n\n\n\nexport const DELETE_USER = gql`\n    mutation DELETEUSER($_id: ID)  {\n        deleteDetails(_id:$_id){\n        msg\n        status         \n    }\n}`\n\nexport const FIND_USER = gql`\nquery FINDUSER($_id:ID) {\n    user(_id:$_id) {\n        _id\n        country_code\n        phone_no\n        email\n        first_name\n        last_name\n        demo\n        address\n        location\n        password\n        provider_subCategoryID\n        professional_document_url\n        personal_document_url\n        proof_status\n    }\n}\n`;\n\n\nexport const PROVIDER_DOCUMENT_VERIFIED = gql`\nmutation PROVIDERDOCUMENTVERIFIED($_id:ID,$proof_status:String) {\n    provider_document_verified(_id:$_id,proof_status:$proof_status) {\n        info\n        # provider_document_url\n        proof_status\n    }\n}\n`;\n\nexport const USER_EMAIL_QUERY = gql`\nquery USEREMAILQUERY($data:JSON) {\n    user_search(data:$data) {\n        _id\n        email\n        proof_status\n        phone_no\n        first_name\n        last_name\n        role\n    }\n}\n`;\n\nexport const GET_COMPANY = gql`\n query GETCOMPANY($limit: Int,$page:Int,$search:JSON,$company_id:ID,$provider_search:JSON) {\n    get_company_detail(limit:$limit,page:$page,search:$search,company_id:$company_id) {\n        pageInfo{\n            totalDocs\n            page\n        }\n        data{\n            _id\n            user_id\n            company_name\n            company_website\n            about_company\n            company_category\n            user_id\n            get_company_user_detail {\n                first_name\n                last_name\n                role\n            }\n            get_company_address_detail(company_id:$company_id) {\n                address\n                _id\n                lat\n                lng\n            }\n            get_parent_company_provider(provider_search:$provider_search,company_id:$company_id) {\n                email\n                created_at\n                provider_id\n                register_status\n                register_link_status\n                _id\n            }\n        }\n    }\n}\n`;\n\n\n\nexport const UPDATE_COMPANY_DETAIL = gql`\n    mutation UPDATECOMPANYDETAIL($_id: ID,$company_data:JSON,$logo_file:Upload,$profile_file:Upload)  {\n        update_company_detail(_id:$_id,company_data:$company_data,logo_file:$logo_file,profile_file:$profile_file){\n        msg\n        status         \n    }\n}`\n\nexport const DELETE_COMPANY = gql`\n    mutation DELETECOMPANY($company_id: ID)  {\n        deleteCompany(company_id:$company_id){\n        msg\n        status         \n    }\n}`\n\n\nexport const DELETE_COMPANY_PROVIDER = gql`\n    mutation DELETECOMPANYPROVIDER($_id:ID,$company_id: ID)  {\n        deleteCompanyProvider(_id:$_id,company_id:$company_id){\n        msg\n        status         \n    }\n}`\n"],"sourceRoot":""}