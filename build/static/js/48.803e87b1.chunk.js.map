{"version":3,"sources":["component/Comman/PlaceComplete.js"],"names":["PlaceComplete","props","useState","address","set_address","handleChange","value","a","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","address_components","map","index","types","PlaceCompleteFunction","home_page_city","long_name","center","lat","lng","catch","error","console","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","placeholder","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"8KAuEeA,UAlEO,SAACC,GACnB,MAA6CC,mBAAS,SAAtD,mBACA,GADA,UAC+BA,mBAAS,KAAxC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAY,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sDACjBH,EAAYE,GADK,2CAAH,sDAGZE,EAAY,uCAAG,WAAML,GAAN,SAAAI,EAAA,sDACjBH,EAAYD,GACZM,2BAAiBN,GACZO,KADL,uCACU,WAAMC,GAAN,SAAAJ,EAAA,sEACIK,oBAAUD,EAAQ,IAAID,MAAK,SAAAG,GAC7BF,EAAQ,GAAGG,mBAAmBC,KAAI,SAACT,EAAOU,GACf,aAAnBV,EAAMW,MAAM,IACZhB,EAAMiB,sBAAsB,CAAEC,eAAgBb,EAAMc,UAAWC,OAAQ,CAACR,EAAOS,IAAKT,EAAOU,aAJrG,2CADV,uDAUOC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,QAASA,MAZ5B,2CAAH,sDAelB,OACI,oCAEI,kBAAC,IAAD,CACInB,MAAOH,EACPwB,SAAUtB,EACVuB,SAAUpB,IAET,gBAAGqB,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,uBAAwBC,EAAvD,EAAuDA,QAAvD,OACG,yBAAKC,UAAU,qBACX,0BACQJ,EAAc,CACdK,YAAa,WACbD,UAAW,mDAGnB,yBAAKA,UAAU,mCACVD,GAAW,yBAAKC,UAAU,gBAAf,cACXH,EAAYf,KAAI,SAAAoB,GACb,IAAMF,EAAYE,EAAWC,OACvB,0BACA,kBAEAC,EAAQF,EAAWC,OACnB,CAAEE,gBAAiB,UAAWC,OAAQ,WACtC,CAAED,gBAAiB,UAAWC,OAAQ,WAC5C,OACI,wBACQR,EAAuBI,EAAY,CACnCF,YACAI,UAGJ,8BAAOF,EAAWK","file":"static/js/48.803e87b1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n} from 'react-places-autocomplete';\r\nconst PlaceComplete = (props) => {\r\n    const [home_page_city, set_home_page_city] = useState('kenya')\r\n    const [address, set_address] = useState(\"\")\r\n\r\n    const handleChange = async value => {\r\n        set_address(value);\r\n    };\r\n    const handleSelect = async address => {\r\n        set_address(address);\r\n        geocodeByAddress(address)\r\n            .then(async results => {\r\n                await getLatLng(results[0]).then(latLng => {\r\n                    results[0].address_components.map((value, index) => {\r\n                        if (value.types[0] === \"locality\") {\r\n                            props.PlaceCompleteFunction({ home_page_city: value.long_name, center: [latLng.lat, latLng.lng] });\r\n                        }\r\n                    });\r\n\r\n                })\r\n            }).catch(error => console.error('Error', error));\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <PlacesAutocomplete\r\n                value={address}\r\n                onChange={handleChange}\r\n                onSelect={handleSelect}\r\n            >\r\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                    <div className=\"position-relative\">\r\n                        <input\r\n                            {...getInputProps({\r\n                                placeholder: 'Location',\r\n                                className: 'location-search-input jiffy_input place_input',\r\n                            })}\r\n                        />\r\n                        <div className=\"autocomplete-dropdown-container\">\r\n                            {loading && <div className=\"suggest_load\">Loading...</div>}\r\n                            {suggestions.map(suggestion => {\r\n                                const className = suggestion.active\r\n                                    ? 'suggestion-item--active'\r\n                                    : 'suggestion-item';\r\n                                // inline style for demonstration purpose\r\n                                const style = suggestion.active\r\n                                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                                return (\r\n                                    <div\r\n                                        {...getSuggestionItemProps(suggestion, {\r\n                                            className,\r\n                                            style,\r\n                                        })}\r\n                                    >\r\n                                        <span>{suggestion.description}</span>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </PlacesAutocomplete>\r\n        </>\r\n    )\r\n}\r\nexport default PlaceComplete;\r\n"],"sourceRoot":""}