{"version":3,"sources":["component/User/Book/contract/ProjectImageCategoryModel.js"],"names":["Option","Select","catgeoryoptions","_id","name","Form","create","props","useHistory","useState","image_detail","set_image_detail","useMutation","UPDATE_CONTRACT_FILE","ContractJobFileUpload","getFieldDecorator","form","useEffect","image_comman_data","submitData","a","validateFields","err","values","console","log","variables","data","status","modelReturnFuncion","span","Item","label","initialValue","doc_category","rules","required","size","placeholder","allowClear","map","item","value","image_tag","className","type","block","onClick"],"mappings":"qPAMQA,EAAWC,IAAXD,OACFE,EAAiB,CACnB,CACIC,IAAI,SACJC,KAAK,SACN,CACCD,IAAI,UACJC,KAAK,YAoEEC,cAAKC,QAALD,EAjEoB,SAACE,GAClBC,uBAAd,IACA,EAAyCC,mBAAS,IAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAqCC,YAAYC,KAAjD,mBAAOC,EAAP,uBACA,IAAQC,EAAsBR,EAAMS,KAA5BD,kBAERE,qBAAU,WACNN,EAAiBJ,EAAMW,qBACxB,CAACX,IAEJ,IAAMY,EAAU,uCAAG,sBAAAC,EAAA,sDACfb,EAAMS,KAAKK,eAAX,uCAA0B,WAAOC,EAAKC,GAAZ,SAAAH,EAAA,yDACtBI,QAAQC,IAAI,iBAAkBF,GACzBD,EAFiB,mBAGlBC,EAAM,IAAUb,EAAY,IAC5Bc,QAAQC,IAAI,uBAAwBF,IAChCb,EAAY,IALE,gCAMSI,EAAsB,CAAEY,UAAWH,IAN5C,OAOoC,YAPpC,OAOAI,KAAKb,sBAAsBc,QACrCrB,EAAMsB,qBARI,2CAA1B,yDADe,2CAAH,qDAehB,OACI,oCACI,kBAAC,IAAD,CAAMzB,KAAK,yBACP,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK0B,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWC,MAAM,oBACZjB,EAAkB,WAAY,CAC3BkB,aAAY,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAcwB,aAC5BC,MAAO,CAAC,CAAEC,UAAU,KAFvBrB,CAGG,kBAAC,IAAD,CACAsB,KAAM,QACNC,YAAY,0BACZC,YAAU,GAETrC,EAAgBsC,KAAI,SAAAC,GAAI,OACrB,kBAACzC,EAAD,CAAQ0C,MAAOD,EAAI,KAAUA,EAAI,cAMrD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKX,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWC,MAAM,gBACZjB,EAAkB,YAAa,CAC5BkB,aAAY,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAciC,UAC5BR,MAAO,CAAC,CAAEC,UAAU,KAFvBrB,CAGE,kBAAC,IAAD,CAAOsB,KAAM,QAASO,UAAU,SAI/C,yBAAKA,UAAU,+CACX,kBAAC,IAAD,CAAQC,KAAK,UAAUD,UAAU,OAAOE,OAAK,EAACC,QAAS,kBAAM5B,MACzD,yBAAKyB,UAAU,oBAAf","file":"static/js/54.c9e79830.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Form, Input, Button,Select } from 'antd';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport { UPDATE_CONTRACT_FILE, GET_CONTRACT_FILES, DELETE_CONTRACT_FILE } from '../../../../graphql/User/contract';\r\n\r\nconst { Option } = Select;\r\nconst catgeoryoptions =[\r\n    {\r\n        _id:\"others\",\r\n        name:\"Other\"\r\n    }, {\r\n        _id:\"Drawing\",\r\n        name:\"Drawing\"\r\n    }\r\n]\r\nconst ProjectImagesCategoryModel = (props) => {\r\n    let history = useHistory();\r\n    const [image_detail, set_image_detail] = useState({});\r\n    const [ContractJobFileUpload, { }] = useMutation(UPDATE_CONTRACT_FILE)\r\n    const { getFieldDecorator } = props.form;\r\n\r\n    useEffect(() => {\r\n        set_image_detail(props.image_comman_data)\r\n    }, [props])\r\n\r\n    const submitData = async () => {\r\n        props.form.validateFields(async (err, values) => {\r\n            console.log(\"next -> values\", values)\r\n            if (!err) {\r\n                values['_id'] = image_detail['_id'];\r\n                console.log(\"submitData -> values\", values)\r\n                if (image_detail['_id']) {\r\n                    let final_data = await ContractJobFileUpload({ variables: values })\r\n                    if(final_data.data.ContractJobFileUpload.status===\"success\"){\r\n                        props.modelReturnFuncion()\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <Form name=\"contract_image_update\">\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <Form.Item label=\"Project Category\">\r\n                            {getFieldDecorator(\"category\", {\r\n                                initialValue: image_detail?.doc_category,\r\n                                rules: [{ required: true }]\r\n                            })( <Select\r\n                                size={\"large\"} \r\n                                placeholder=\"Select a image category\"\r\n                                allowClear\r\n                            >\r\n                                {catgeoryoptions.map(item => (\r\n                                    <Option value={item['_id']}>{item['name']}</Option>\r\n                                ))}\r\n                            </Select>)}\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <Form.Item label=\"Project Tage\">\r\n                            {getFieldDecorator(\"image_tag\", {\r\n                                initialValue: image_detail?.image_tag,\r\n                                rules: [{ required: true }]\r\n                            })(<Input size={\"large\"} className=\"\" />)}\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"steps-action justify-content-between d-flex\">\r\n                    <Button type=\"primary\" className=\"w-50\" block onClick={() => submitData()}>\r\n                        <div className=\"normal_font_size\">Submit</div>\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\nexport default Form.create()(ProjectImagesCategoryModel);\r\n"],"sourceRoot":""}