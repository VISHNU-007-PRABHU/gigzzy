{"version":3,"sources":["graphql/User/home_page.js","component/User/HomePage/Trending/TrendingCategory.js","../node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["GET_CATEGORY_PAGINATION","gql","_templateObject","Object","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__","SEARCH_CATEGORY","_templateObject2","_templateObject3","SEARCH_CATEGORY_ONLY","_templateObject4","SEARCH_SUB_CATEGORY_ONLY","_templateObject5","FIND_CATEGORY","_templateObject6","FIND_SUBCATEGORY","_templateObject7","GET_TRENDING","_templateObject8","GET_FUTURE","_templateObject9","TrendingCategory","props","data","useContext","HomeContext","_useState","useState","_useState2","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","category_data","set_category_data","search_category","useQuery","useEffect","fetch_future","_ref","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_waioz_gigzzy_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","result","wrap","_context","prev","next","refetch","limit","sent","chunk","get_is_future","stop","apply","this","arguments","open_model","_ref2","_callee2","datas","_context2","on_book","_x","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","Fragment","map","Maindata","antd__WEBPACK_IMPORTED_MODULE_4__","className","antd__WEBPACK_IMPORTED_MODULE_5__","sm","md","alt","src","small_img_url","loading","class","antd__WEBPACK_IMPORTED_MODULE_6__","onClick","size","block","category_type","subCategory_name","category_name","__webpack_require__","d","__webpack_exports__","useMutation","_apollo_react_common__WEBPACK_IMPORTED_MODULE_0__","tslib__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","apollo_client__WEBPACK_IMPORTED_MODULE_3__","_wry_equality__WEBPACK_IMPORTED_MODULE_4__","ts_invariant__WEBPACK_IMPORTED_MODULE_5__","OperationData","options","context","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","getQueryResult","startQuerySubscription","execute","skip","query","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","networkStatus","ready","called","undefined","fetchData","ssr","children","opts","displayName","onCompleted","onError","partialRefetch","fetchPolicy","obs","watchQuery","renderPromises","registerSSRObservable","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","bind","updatedOptions","variables","ssrLoading","addQueryPromise","updateCurrentData","prepareObservableQueryOptions","Query","metadata","reactComponent","observableQueryFields","observable","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","initializeObservableQuery","getSSRObservable","observableQueryOptions","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","error","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","assign","create","currentResult","partial","errors","length","graphQLErrors","keys","setTimeout","resetQueryStoreErrors","unsubscribe","useBaseQuery","x","tick","queryDataRef","current","queryData","memoFn","key","ref","value","useDeepMemo","MutationData","setResult","mutation","Mutation","mostRecentMutationId","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","previousResult","mutationDataRef","mutationData","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","endSubscription","startSubscription","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"static/js/147.3fda05fd.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\n\nexport const GET_CATEGORY_PAGINATION = gql`\n query GETCATEGORYPAGINATION($limit: Int,$page:Int,$data:JSON){\n    get_category(limit:$limit,page:$page,data:$data) {\n        pageInfo{\n            totalDocs\n            page\n        }\n        data{\n            _id\n            category_type\n            category_name\n            is_parent\n            small_img_url\n            base_price\n            child_category{\n                _id\n                subCategory_name\n            }\t\n        }\n    }\n}\n`;\n\nexport const GET_CATEGORY = gql`\n query GETCATEGORY{\n    category{\n        _id\n        category_type\n        category_name\n        is_parent\n        small_img_url\n        base_price\n        child_category{\n            _id\n            subCategory_name\n        }\t\n    }\n}\n`;\n\nexport const SEARCH_CATEGORY = gql`\nquery SEARCH_CATEGORY($_id:ID,$data:JSON) {\n    search_category(_id:$_id,data:$data) {\n        _id\n        category_name\n        description\n        small_img_url\n        certificates\n        is_parent\n        base_price\n        hour_price\n        hour_limit\n        service_fee\n        img_url\n        category_type\n        subCategory_name\n        Certificate{\n            certificate_name\n            _id\n        }\n    }\n}\n`;\n\n\nexport const SEARCH_CATEGORY_ONLY = gql`\nquery SEARCHCATEGORYONLY($data:JSON) {\n    search_category_only(data:$data) {\n        _id\n        category_name\n    }\n}\n`;\n\n\nexport const SEARCH_SUB_CATEGORY_ONLY = gql`\nquery SEARCHSUBCATEGORYONLY($data:JSON) {\n    search_sub_category_only(data:$data) {\n        _id\n        subCategory_name\n    }\n}\n`;\n\nexport const FIND_CATEGORY = gql`\nquery FINDCATEGORY($_id:ID,$category_type:Int) {\n    category(_id:$_id,category_type:$category_type) {\n        _id\n        category_name\n        small_img_url\n        is_parent\n        description\n        child_category{\n            _id\n            subCategory_name\n            description\n            img_url\n        }\n    }\n}\n`;\n\n\nexport const FIND_SUBCATEGORY = gql`\nquery FINDSUBCATEGORY($_id:ID) {\n    sub_category(_id:$_id) {\n        _id\n        subCategory_name\n        img_url\n        small_img_url\n        description\n    }\n}\n`;\n\nexport const GET_TRENDING = gql`\nquery GETTRENDING{\n    get_trending {\n      _id\n      category_name\n      category_type\n      subCategory_name\n      small_img_url\n      is_parent\n    }\n}`\n\nexport const GET_FUTURE = gql`\nquery GETFUTURE($limit:Int){\n    get_is_future (limit:$limit){\n      _id\n      category_name\n      category_type\n      subCategory_name\n      small_img_url\n      is_parent\n    }\n}`\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Button, Row, Col } from 'antd';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_FUTURE } from '../../../../graphql/User/home_page'\nimport { HomeContext } from '../../../context/Location'\nimport { chunk } from \"lodash\";\n\nconst TrendingCategory = (props) => {\n    const data = useContext(HomeContext);\n    const [category_data, set_category_data] = useState([])\n    const search_category = useQuery(GET_FUTURE)\n    useEffect(() => {\n        fetch_future()\n    }, [])\n\n    const fetch_future = async () => {\n        let result = await search_category.refetch({ limit: 8 })\n        set_category_data(chunk(result.data.get_is_future, 4))\n    }\n\n    const open_model = async (datas) => {\n        data.on_book(datas)\n    }\n    return (\n        <>\n            {category_data && category_data.map(Maindata => {\n                return (\n                    <>\n                        <Row  className=\"owl-stage-outer\">\n                            {Maindata && Maindata.map(data => {\n                                return (\n                                    <Col sm={12} md={6}>\n                                        <div className=\"p-2\">\n                                            <img alt='gigzzy home banner'\n                                                src={data?.small_img_url}\n                                                loading=\"lazy\" class=\"h-75 br_10 lazyload img-fluid w-100\" />\n                                            <div className=\"px-3 mt-n4\">\n                                                <Button onClick={() => { open_model(data) }} className=\"py-4 align-items-center d-flex justify-content-center bold br_10 border-0 primary_blue_color table_shadow\" size={\"large\"} block>\n                                                    {data.category_type === 2 ? data?.subCategory_name : data?.category_name}\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </Col>\n                                )\n                            })\n                            }\n                        </Row>\n                    </>\n                )\n            })}\n        </>\n    )\n}\nexport default TrendingCategory;\n","import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __rest, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions) {\n    if (!equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.forceUpdate();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    if (this.getOptions().skip) return false;\n\n    var _a = this.getOptions(),\n        children = _a.children,\n        ssr = _a.ssr,\n        displayName = _a.displayName,\n        skip = _a.skip,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        partialRefetch = _a.partialRefetch,\n        opts = __rest(_a, [\"children\", \"ssr\", \"displayName\", \"skip\", \"onCompleted\", \"onError\", \"partialRefetch\"]);\n\n    var fetchPolicy = opts.fetchPolicy;\n    if (ssr === false) return false;\n\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first';\n    }\n\n    var obs = this.refreshClient().client.watchQuery(__assign({}, opts, {\n      fetchPolicy: fetchPolicy\n    }));\n\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(obs, this.getOptions());\n    }\n\n    var currentResult = this.currentObservable.query.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    var lazyOptions = this.lazyOptions || {};\n\n    var updatedOptions = __assign({}, options, {\n      variables: __assign({}, options.variables, lazyOptions.variables),\n      context: __assign({}, options.context, lazyOptions.context)\n    });\n\n    if (this.runLazy) {\n      delete updatedOptions.skip;\n    }\n\n    return updatedOptions;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var result;\n    var ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: {}\n    };\n\n    if (this.context && this.context.renderPromises) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult);\n\n      if (!result) {\n        result = ssrLoading;\n      }\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.updateCurrentData = function () {\n    if (this.isMounted) {\n      this.forceUpdate();\n    }\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    this.verifyDocumentType(this.getOptions().query, DocumentType.Query);\n    var displayName = this.getOptions().displayName || 'Query';\n    return __assign({}, this.getOptions(), {\n      displayName: displayName,\n      context: this.getOptions().context || {},\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.observableQueryFields = function (observable) {\n    return {\n      variables: observable.variables,\n      refetch: observable.refetch.bind(observable),\n      fetchMore: observable.fetchMore.bind(observable),\n      updateQuery: observable.updateQuery.bind(observable),\n      startPolling: observable.startPolling.bind(observable),\n      stopPolling: observable.stopPolling.bind(observable),\n      subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign({}, observableQueryOptions, {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(observableQueryOptions);\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n    }\n\n    var newObservableQueryOptions = __assign({}, this.prepareObservableQueryOptions(), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n\n        if (_this.previousData.result && _this.previousData.result.loading === loading && _this.previousData.result.networkStatus === networkStatus && equal(_this.previousData.result.data, data || {})) {\n          return;\n        }\n\n        _this.updateCurrentData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n\n        _this.updateCurrentData();\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var _this = this;\n\n    var result = {\n      data: Object.create(null)\n    };\n    Object.assign(result, this.observableQueryFields(this.currentObservable.query));\n\n    if (this.getOptions().skip) {\n      result = __assign({}, result, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n      data = data || Object.create(null);\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      Object.assign(result, {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result ? this.previousData.result.data : {};\n        Object.assign(result.data, previousData, data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = this.getOptions().partialRefetch;\n\n        if (partialRefetch && Object.keys(data).length === 0 && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        Object.assign(result.data, data);\n      }\n    }\n\n    setTimeout(function () {\n      _this.currentObservable.query.resetQueryStoreErrors();\n    });\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var _a = this.currentObservable.query.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: updatedOptions,\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [result]);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    var _this = this;\n\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n\n    var runMutation = function runMutation(options) {\n      return _this.runMutation(options);\n    };\n\n    return [runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.runMutation = function (mutationFunctionOptions) {\n    var _this = this;\n\n    if (mutationFunctionOptions === void 0) {\n      mutationFunctionOptions = {};\n    }\n\n    this.onMutationStart();\n    var mutationId = this.generateNewMutationId();\n    return this.mutate(mutationFunctionOptions).then(function (response) {\n      _this.onMutationCompleted(response, mutationId);\n\n      return response;\n    }).catch(function (error) {\n      _this.onMutationError(error, mutationId);\n\n      if (!_this.getOptions().onError) throw error;\n    });\n  };\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables))) {\n      this.endSubscription();\n      delete this.currentObservable.query;\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign({}, currentResult, {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    loading: true,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };"],"sourceRoot":""}